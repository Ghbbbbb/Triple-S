You are now an API encapsulation robot. Your task is to create new APIs based on the functions of existing APIs for the new tasks provided by the user. Additionally, you need to provide some examples of the new APIs. 
It is important to note that the new APIs must be permutations and combinations of the existing APIs.

And you are working in a room, where exists a robotic arm with a two-finger gripper on its end, and a workbench with 
four different weight blocks and two mugs randomly placed on it, respectively called 'block1', 'block2', 'block3', 'block4', 'white_mug' and 'black_mug'.
For the blocks, the heaviest block are fixed, and other blocks are moveable.

Here are some existing apis:

class pri:
    def reset_robot(self):
        """
        Reset the robot to initial pose, you should call it upon task completion, unless the task explicitly specifies moving the gripper to a designated position.
        """
        self.move(self.init_pos, self.init_rot)

    def get_obj_pose(self, obj_name):
        """
        Get current pose of the object, This func will return 2 parameters, the position and quaternion of the object. 
        Example: `object_pos, object_quat = pri.get_obj_pose("object_name")`
        """
        pos = self.mj_data.body(obj_name).xpos.copy()
        pos[2] -= 0.31
        quat = self.mj_data.body(obj_name).xquat.copy()
        return pos, quat

    def move(self, pos, quat):
        """
        Move the end-effector/gripper to the target position and quaternion. The func takes 2 parameters as input, first param 'position' means the target position.
        second param 'quaternion' means the target quaternion. Both of them are type ndarray.
        """
        start_time = time.time()
        def checkArriveState(state):
            current_pos, current_quat = self.get_current_pose()
            error = 2*np.sum(np.abs(state[:3] - current_pos)) + np.sum(np.abs(state[3:] - current_quat)/2.5)
            end_time = time.time()
            elapsed_time  = end_time - start_time
            # print("time:",elapsed_time)
            if error <= 0.05 or elapsed_time  > 30:
                return True
            return False
        while True:
            self.action = np.concatenate((pos, quat), axis=0)
            self.step(self.action)
            if self.render_mode == "human":
                self.render()
            if checkArriveState(self.action):
                break

    def grab(self, obj_name):
        """
        Grab specified object according to the input name.
        """
        self.gripper_ctrl("open")
        obj_pos, obj_quat = self.get_obj_pose(obj_name)
        self.move(np.add(obj_pos, np.array([0, 0, 0.1])), obj_quat)
        self.move(obj_pos, obj_quat)
        self.gripper_ctrl("close")
        end_pos, end_quat = self.get_current_pose()
        self.move(np.add(end_pos, np.array([0, 0, 0.1])), end_quat)

    def gripper_ctrl(self, cmd: str):
        """
        Ctrl the gripper, param 'command' is a string type, consist of 'open' and 'close'.
        """
        if cmd == "open":
            self.mj_data.actuator("0_gripper_l_finger_joint").ctrl = 20
        elif cmd == "close":
            self.mj_data.actuator("0_gripper_l_finger_joint").ctrl = -20
        step = 0
        while True:
            step += 1
            self.step(self.action)
            if self.render_mode == "human":
                self.render()
            if step > 100:
                break

    def get_obj_mass(self, name: str) -> float:
        """ Get obj mass from obj name.

        :param name: obj name
        :return: obj mass
        """
        self.grab(name)
        self.mj_data.actuator("0_gripper_l_finger_joint").ctrl = 0
        body_id = self.mj_model.body(name).id
        body_mass = self.mj_model.body_mass[body_id]
        return body_mass


The units are calculated in meters. If centimeters are used, they need to be converted to meters. 
pose means the position and quaternion, the position expressed in 'x,y,z', the quaternion expressed in 'a,b,c,d'.

Next, I will give you a correct example for you to learn:

Example 1:
User: move the gripper 10cm over the heaviest_movable_block.
Robot: "```python
block_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}
sorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])
lightest_movable_block = sorted_blocks[0][0]
medium_weight_movable_block = sorted_blocks[1][0]
heaviest_movable_block = sorted_blocks[2][0]
fixed_block = sorted_blocks[3][0]
heaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_movable_block)
target_pos = heaviest_pos + np.array([0, 0, 0.1])
pri.move(target_pos, heaviest_quat)```"

New API: "
    def get_weight_block_positions(self, block_name):
        """ 
        Get pose from specified-weight block name, block_name is chosen from 'lightest_movable_block','middle_weight_movable_block','heaviest_movable_block','fixed_block'
        """
        # get the mass of block
        block_masses = {
            'block1': self.get_obj_mass('block1'),
            'block2': self.get_obj_mass('block2'),
            'block3': self.get_obj_mass('block3'),
            'block4': self.get_obj_mass('block4')
        }
        
        # sort the block by mass
        sorted_blocks = sorted(block_masses.items(), key=lambda x: x[1])
        
        # get the name of block
        lightest_movable_block = sorted_blocks[0][0]
        medium_weight_movable_block = sorted_blocks[1][0]
        heaviest_movable_block = sorted_blocks[2][0]
        fixed_block = sorted_blocks[3][0]
        
        # get the pose of block
        block_positions = {
            "lightest_movable_block": self.get_obj_pose(lightest_movable_block),
            "medium_weight_movable_block": self.get_obj_pose(medium_weight_movable_block),
            "heaviest_movable_block": self.get_obj_pose(heaviest_movable_block),
            "fixed_block": self.get_obj_pose(fixed_block)
        }
        return block_positions[block_name]
"
New API examples:
[task description]
move the gripper over a specified-weight block.
[thought]
Call `get_weight_block_positions()` func to get the pose of specified-weight block, then calculate the target_pos and move the gripper to it.
[examples]
#example1
User: "Move the gripper 14cm above the lightest_movable_block"
Robot: "```python
lightest_pos, lightest_quat = pri.get_weight_block_positions("lightest_movable_block")
target_pos = lightest_pos + np.array([0, 0, 0.14])
pri.move(target_pos, lightest_quat)
```"
#example2
User: "Move the gripper 12cm above the lightest_movable_block, then move the gripper 5cm on the top of the fixed_block"
Robot: "```python
lightest_pos, lightest_quat = pri.get_weight_block_positions("lightest_movable_block")
target_pos = lightest_pos + np.array([0, 0, 0.12])
pri.move(target_pos, lightest_quat)
fixed_pos, fixed_quat = pri.get_weight_block_positions("fixed_block")
target_pos = fixed_pos + np.array([0, 0, 0.05])
pri.move(target_pos, fixed_quat)
```"

For each task, you need to analyze the existing User-Robot dialogue and then re-encapsulate the APIs in the Robot dialogue. Through the re-encapsulated APIs, the user's tasks can be accomplished more easily.
You need to output the New API and New API examples.The New API is a simplified implementation for the user's task. And the New API examples consist of [task description], [thought], and [examples]. [task description] describes the commonality of this type of task, [thought] explains how to complete this type of task, and [examples] provide the new user-robot dialogues by the new APIs you have encapsulated. You need to provide at least two examples.
It is important to note that the new API you encapsulate must serve the current user's question.

Now, please first to output the New API and then New API examples for the following task: