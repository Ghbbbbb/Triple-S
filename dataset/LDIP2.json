[
    {
        "instruction": "Move the gripper 10cm above the heaviest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nheaviest_block = sorted_blocks[2][0]\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)```",
        "goal_pos": "{\"gripper_pos\": [0.3906512839851265, 0.17951570592839416, 0.2299410937975504], \"gripper_state\": \"initial\", \"block1_goal\": [0.5479952562353749, 0.22742443017450295, 0.44098542724196665], \"block2_goal\": [0.6535318811926014, -0.17337853478380577, 0.44098542724196665], \"block3_goal\": [0.3839533751419183, 0.18401498467975874, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please move the gripper 0.15m above the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.15])\npri.move(target_pos, lightest_quat)```",
        "goal_pos": "{\"gripper_pos\": [0.5525511321817277, 0.21971893391566566, 0.2796389445883027], \"gripper_state\": \"initial\", \"block1_goal\": [0.5479952562353749, 0.22742443017450295, 0.44098542724196665], \"block2_goal\": [0.6535318811926014, -0.17337853478380577, 0.44098542724196665], \"block3_goal\": [0.3839533751419183, 0.18401498467975874, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please move the gripper 10cm above the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nfixed_block = sorted_blocks[3][0]\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)```",
        "goal_pos": "{\"gripper_pos\": [0.7056915109321377, -0.24154498158791748, 0.2409657483614029], \"gripper_state\": \"initial\", \"block1_goal\": [0.5479952562353749, 0.22742443017450295, 0.44098542724196665], \"block2_goal\": [0.6535318811926014, -0.17337853478380577, 0.44098542724196665], \"block3_goal\": [0.3839533751419183, 0.18401498467975874, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Move the gripper 10cm above the medium-weight movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)```",
        "goal_pos": "{\"gripper_pos\": [0.6549721867923296, -0.17484854800045554, 0.22953116860493078], \"gripper_state\": \"initial\", \"block1_goal\": [0.5479952562353749, 0.22742443017450295, 0.44098542724196665], \"block2_goal\": [0.6535318811926014, -0.17337853478380577, 0.44098542724196665], \"block3_goal\": [0.3839533751419183, 0.18401498467975874, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please pick up the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\npri.grab(lightest_block)\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45083789228311305, 0.0037548552111031142, 0.23669881389951436], \"gripper_state\": \"close\", \"block1_goal\": [0.4545730784571925, 0.002903070720557968, 0.5429404596460553], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Grab the medium-weight movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\npri.grab(medium_block)\npri.reset_robot()````",
        "goal_pos": "{\"gripper_pos\": [0.44629984585521804, -0.002357409029207218, 0.23566875123263825], \"gripper_state\": \"close\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.4468216135186087, -0.0025672999253694238, 0.5403221391887552], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Pick up the heaviest movable cube.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\npri.reset_robot()````",
        "goal_pos": "{\"gripper_pos\": [0.44555935839196736, 0.01138563001936204, 0.2359013162380122], \"gripper_state\": \"close\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.4527627764934871, 0.009418635441117587, 0.5409344372843936], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Pick up the lightest movable block and place it in the black mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\npri.grab(lightest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.447325402214356, -0.013620897740478977, 0.23982051136735522], \"gripper_state\": \"open\", \"block1_goal\": [0.45374457121069456, -0.0951999093341716, 0.4409854276683598], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please pick up the lightest movable block and place it in the white mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\npri.grab(lightest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4565646717597759, -0.004354000005570254, 0.23752051030099325], \"gripper_state\": \"open\", \"block1_goal\": [0.7798686180923796, -0.15635180289181438, 0.4412477401326084], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Grab the medium-weight movable block and place it in the black mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4473559214833861, -0.014206705540522939, 0.23996199696977788], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.43926082556187157, -0.0957725630027061, 0.44098542685549824], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Grab the medium-weight movable block and place it in the milk colored mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\npri.grab(medium_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45711904311490625, -0.004504802747253612, 0.2375715970923435], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.770219078012067, -0.14795315808733234, 0.44098542712751815], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Pick up the heaviest movable block and place it in the night colored mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4477616157516039, -0.015209176294567864, 0.24040196898240734], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.45012882158384415, -0.09953036491107593, 0.44098542682183095], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Pick up the heaviest movable block and place it in the white mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4570535485441455, -0.0044707449170634465, 0.2375528795206297], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.7764893256948038, -0.15374876635945064, 0.440985427232631], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please stack the lightest movable block on top of the medium-weight movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\npri.grab(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4555267708957824, -0.006094758904891143, 0.23710476881277026], \"gripper_state\": \"open\", \"block1_goal\": [0.6660030445565818, -0.1831230543970676, 0.48111429236918474], \"block2_goal\": [0.6536154497313396, -0.1732686023361357, 0.4409805725467899], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the medium-weight movable block on top of the lightest movable cube.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\npri.grab(medium_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4541924753051335, 0.008001995060674703, 0.23665410903131628], \"gripper_state\": \"open\", \"block1_goal\": [0.5479991599189467, 0.22742322780772664, 0.44094176629917986], \"block2_goal\": [0.5497206798116162, 0.2267506007858068, 0.4809259645898588], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the lightest movable block on top of the heaviest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(lightest_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4474563503269481, 0.014794236167937985, 0.23830958235917693], \"gripper_state\": \"open\", \"block1_goal\": [0.39043280054671775, 0.18388216853987488, 0.4809762998422995], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.3838996747451872, 0.18410225903613817, 0.44098251318352655], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please place the heaviest movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4549304844531398, 0.00870888045208386, 0.23690593488041117], \"gripper_state\": \"open\", \"block1_goal\": [0.5480011869441002, 0.22742563154701315, 0.4409127663957834], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.5514969498597638, 0.2283229307039073, 0.4808493371040318], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the heaviest movable cube on top of the medium-weight movable cube.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45543894252873635, -0.00608764958332717, 0.23709053972315292], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.6536074062669063, -0.1733628661976423, 0.44096115645301853], \"block3_goal\": [0.6602757945732273, -0.18150976477069602, 0.48091092753865394], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the medium-weight movable block on top of the heaviest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(medium_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.44763399012697525, 0.013869103292277436, 0.23838166576048264], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.3817766169115643, 0.18030634450667055, 0.4809526313059207], \"block3_goal\": [0.3838978542862859, 0.18410090749734798, 0.44097668593187406], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please stack the lightest movable block on top of the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(lightest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45581949686227957, -0.005488837931068639, 0.23728905739117184], \"gripper_state\": \"open\", \"block1_goal\": [0.7177130547009267, -0.2290736611305403, 0.4811010095129888], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the medium-weight movable block on the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(medium_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4556994652523726, -0.0056570354662902386, 0.23732048052466154], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.7087157501974134, -0.23563937571242533, 0.4809749063279425], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the heaviest movable block on top of the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(heaviest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4557249291422897, -0.005572411493592281, 0.23726148275715192], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.7112138720250845, -0.23059488347495766, 0.4809749905475255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block 10cm in front of the black mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\npri.grab(lightest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0.1, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45602687364996014, -0.008465936551047522, 0.2389436554922309], \"gripper_state\": \"open\", \"block1_goal\": [0.5584787948391293, -0.09958780464389479, 0.4412105812696976], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block 15cm behind the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(lightest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([-0.15, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45302342404328705, -0.008571231325592172, 0.2372570576324074], \"gripper_state\": \"open\", \"block1_goal\": [0.566069027282045, -0.23181512683987124, 0.44099146787171933], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please place the medium-weight movable block 10cm to the left of the white mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\npri.grab(medium_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0.1, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45842421531767275, -0.0029050834042560966, 0.23772523198821421], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.7708489471381994, -0.049654790467429794, 0.4409854271003409], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the medium-weight movable block 0.25m to the left of the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(medium_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0.25, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4573336938671471, -0.0004952773152521097, 0.23705110598756746], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.7087218201894161, 0.015290655848479499, 0.4409854271751102], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please place the heaviest movable block 15cm to the left of the white mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0.15, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4588859013771976, -0.0020477987134393744, 0.23773848295884398], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.7720704584000205, -0.0033442843657119307, 0.44098542722649253], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the heaviest movable block 0.25m behind the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(heaviest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([-0.25, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4500575476909977, -0.011375200043824437, 0.23714766573942597], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.4599055973009898, -0.2297114987537793, 0.4409854272235231], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block in the middle of the other two movable blocks.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\nmid_pos = (medium_pos+heaviest_pos)/2\nmid_pos[2] += 0.1\npri.move(mid_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4554302419388981, -0.0010810542533157518, 0.23660101414684603], \"gripper_state\": \"open\", \"block1_goal\": [0.5205522943445485, 0.00023792215531473184, 0.44098542679066016], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the medium-weight movable block in the middle of the fixed block and the heaviest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(medium_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\nmid_pos = (fixed_pos+heaviest_pos)/2\nmid_pos[2] += 0.1\npri.move(mid_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4544815314414645, -0.0027465557406962, 0.23664984262333583], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.5411562465721764, -0.02540168494375363, 0.4409854270163948], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the heaviest movable block in the middle of the other two movable blocks.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\nmid_pos = (lightest_pos+medium_pos)/2\nmid_pos[2] += 0.1\npri.move(mid_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4583982134990187, 0.0005182305079148059, 0.23710080454708854], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.6063526027817728, 0.029744585877157788, 0.4409854271844347], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Pick up the movable block closest to the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ndistances={lightest_block:np.linalg.norm(lightest_pos-fixed_pos),medium_block:np.linalg.norm(medium_pos-fixed_pos),heaviest_block:np.linalg.norm(heaviest_pos-fixed_pos)}\nsorted_distances = sorted(distances.items(), key=lambda item:item[1])\ncloest_obj = sorted_distances[0][0]\npri.grab(cloest_obj)\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.44629984585521804, -0.002357409029207218, 0.23566875123263825], \"gripper_state\": \"close\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.4468216135186087, -0.0025672999253694238, 0.5403221391887552], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please pick up the movable block closest to the black mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ndistances={lightest_block:np.linalg.norm(lightest_pos-black_pos),medium_block:np.linalg.norm(medium_pos-black_pos),heaviest_block:np.linalg.norm(heaviest_pos-black_pos)}\nsorted_distances = sorted(distances.items(), key=lambda item:item[1])\ncloest_obj = sorted_distances[0][0]\npri.grab(cloest_obj)\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.44629984585521804, -0.002357409029207218, 0.23566875123263825], \"gripper_state\": \"close\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.4468216135186087, -0.0025672999253694238, 0.5403221391887552], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please place the lightest movable block in the black mug, then place the medium-weight movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\npri.grab(lightest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4504528725622532, -0.014999499059800348, 0.23696457721746483], \"gripper_state\": \"open\", \"block1_goal\": [0.4534698783538864, -0.09522073579830775, 0.44094176802602486], \"block2_goal\": [0.4484245113681297, -0.09383473073103107, 0.4808918631673647], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the medium-weight and lightest movable cubes in sequence in the black mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4489928221592258, -0.01852087491821452, 0.23705983439105865], \"gripper_state\": \"open\", \"block1_goal\": [0.44773588861384417, -0.09343792346065738, 0.48095939463944154], \"block2_goal\": [0.4392622876343314, -0.09577146208731255, 0.44098057063957025], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block in the black mug, then place the heaviest movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(lightest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4522514063670734, -0.014603229179930104, 0.23828040889490804], \"gripper_state\": \"open\", \"block1_goal\": [0.4537552266605108, -0.09519653357084613, 0.44091282879198124], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.46162571657205187, -0.0889269076328742, 0.4807988768973623], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the heaviest and lightest movable blocks in the black mug in sequence.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.450365773937908, -0.014661214306419024, 0.23717669487227327], \"gripper_state\": \"open\", \"block1_goal\": [0.4589117422753444, -0.09626405921780988, 0.48096297313971553], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.4501302623860675, -0.09952998457308683, 0.4409825131763908], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the medium-weight movable block in the black mug, then place the heaviest movable block on top of the medium-weight movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45020163930100754, -0.018212734736067694, 0.23802239221648974], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.43924956843418583, -0.09577642179433316, 0.4409611556612194], \"block3_goal\": [0.44682136345064644, -0.09404657994895069, 0.4809164982489951], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please stack the heaviest and medium-weight movable blocks in sequence in the black mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4503142205807982, -0.016470507907451228, 0.23700615420968169], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.44497908932542024, -0.09831454349484545, 0.48095842595433197], \"block3_goal\": [0.4501284051953297, -0.09953145475895564, 0.4409766859224633], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable cube in the white mug, then place the medium-weight movable block on top of the lightest movable cube.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\npri.grab(lightest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45681158080568746, -0.004394615287889378, 0.23718872633181481], \"gripper_state\": \"open\", \"block1_goal\": [0.7803584017456959, -0.15659047019018027, 0.44094176743776925], \"block2_goal\": [0.7808050365393434, -0.16003480486092078, 0.4808817109990134], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the medium-weight and lightest movable blocks in the white mug in order.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\npri.grab(medium_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4569329379550423, -0.004468297329962452, 0.23717557871510114], \"gripper_state\": \"open\", \"block1_goal\": [0.7823823734727696, -0.15760994464411127, 0.48132567436411783], \"block2_goal\": [0.7702178258393981, -0.1479533480146669, 0.4409805725204283], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please place the medium-weight movable block in the white mug, then place the heaviest movable block on top of the medium-weight movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(medium_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45687302742278835, -0.004422761199101121, 0.23714355483281818], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.7702209750420543, -0.14796720383404102, 0.4409611569770338], \"block3_goal\": [0.7780328271551477, -0.156871637810408, 0.4809074764665505], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the heaviest and medium-weight movable blocks in sequence in the white mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45779579297343886, -0.004520430894403193, 0.23730313294503608], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.7791300519964757, -0.1564440836951762, 0.48095921416694987], \"block3_goal\": [0.7764893898692402, -0.1537488195008522, 0.4409766859371478], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please place the lightest movable block in the black mug, then place the medium-weight movable block on top of the lightest movable block, and finally place the heaviest movable block on top of the medium-weight movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(lightest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4485822539822304, -0.015006876834781562, 0.24199797867861755], \"gripper_state\": \"open\", \"block1_goal\": [0.4534502300954347, -0.09521067260603587, 0.44086954662702676], \"block2_goal\": [0.44839270248302393, -0.09378279872730218, 0.4807619854913343], \"block3_goal\": [0.45762019739667026, -0.09104465709664593, 0.5207183660204486], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the lightest, heaviest, and medium-weight movable cubes in sequence in the black mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(lightest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.44958266729749224, -0.013229121853348591, 0.24123576344067416], \"gripper_state\": \"open\", \"block1_goal\": [0.45378587875886345, -0.09519215060587016, 0.44086976023821645], \"block2_goal\": [0.4564478210745402, -0.08691999367266247, 0.5206872608276123], \"block3_goal\": [0.4617584819979202, -0.08883457170501638, 0.4806937686616109], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the medium-weight movable block in the black mug, then place the lightest movable block on top of the medium-weight movable block, and finally place the heaviest movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.44846966587059234, -0.014004375685322255, 0.241778173573238], \"gripper_state\": \"open\", \"block1_goal\": [0.44791840302507036, -0.09338956113079559, 0.48080674631586984], \"block2_goal\": [0.43928274722872385, -0.09576922857931484, 0.44095631395235785], \"block3_goal\": [0.4566844615250961, -0.08755467635266583, 0.5206390632180431], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the medium-weight, heaviest, and lightest movable blocks in the black mug in sequence.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4481864817034279, -0.01339030421806701, 0.24144359751622052], \"gripper_state\": \"open\", \"block1_goal\": [0.460457883764136, -0.0902248721047088, 0.5208565438251632], \"block2_goal\": [0.43925503866991855, -0.09577550746839744, 0.4409563069370592], \"block3_goal\": [0.44685434559276677, -0.09404043827024644, 0.48090065821174516], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the heaviest movable cube in the black mug, then place the lightest movable block on top of the heaviest movable cube, and finally place the medium-weight movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4492879801544359, -0.01346842887866653, 0.24106060722893513], \"gripper_state\": \"open\", \"block1_goal\": [0.45889162816538287, -0.09620323810774473, 0.48090529124194376], \"block2_goal\": [0.4539656879239003, -0.09363651709355113, 0.5208452937913464], \"block3_goal\": [0.4501316164914448, -0.09952325118535496, 0.44097377287343525], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please stack the heaviest, medium-weight, and lightest movable blocks in sequence in the black mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.44801943356968194, -0.014165672569178115, 0.24145088932945752], \"gripper_state\": \"open\", \"block1_goal\": [0.4577616877185511, -0.10010179250810676, 0.520939877934542], \"block2_goal\": [0.4449867637602821, -0.09831319938677023, 0.4809544652886574], \"block3_goal\": [0.4501300175406102, -0.09953128013804301, 0.44097377324976667], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block in the white mug, then place the medium-weight movable block on top of the lightest movable block, and finally place the heaviest movable block on top of the medium-weight movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(lightest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45707440326912735, -0.004600506942681459, 0.23762721372888546], \"gripper_state\": \"open\", \"block1_goal\": [0.7804110009690708, -0.1566293597063156, 0.44086992258313057], \"block2_goal\": [0.781031881311253, -0.1602651276066486, 0.4806996161511652], \"block3_goal\": [0.7923202957546399, -0.16926027899832957, 0.5205511667934596], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the medium-weight movable block in the white mug, then place the lightest movable block on top of the medium-weight movable block, and finally place the heaviest movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(medium_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4571518867328922, -0.0045083487246185255, 0.23765984480126362], \"gripper_state\": \"open\", \"block1_goal\": [0.7837089697924142, -0.15842163323520797, 0.480805948843502], \"block2_goal\": [0.7702381822285554, -0.1479752793749382, 0.44095631872117147], \"block3_goal\": [0.7942378393723489, -0.16778814012821927, 0.5202752982736369], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the medium-weight, heaviest, and lightest movable blocks in order in the white mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(medium_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45760074095105907, -0.004641368457441094, 0.2377384864696544], \"gripper_state\": \"open\", \"block1_goal\": [0.7921806288412122, -0.16580485447944335, 0.5212783793821761], \"block2_goal\": [0.7702218672052027, -0.14797045818747845, 0.44095631075444036], \"block3_goal\": [0.778046506797171, -0.15689488748402775, 0.4808922581405606], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the heaviest, medium-weight, and lightest movable cubes in sequence in the white mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.1])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4574976993754933, -0.004663850830469782, 0.23774470125836472], \"gripper_state\": \"open\", \"block1_goal\": [0.7890846499970676, -0.16660739559444013, 0.5213606684325929], \"block2_goal\": [0.7754654667543872, -0.15657702340341215, 0.48094201508265466], \"block3_goal\": [0.7743500337734761, -0.1532615432621932, 0.4409737739553936], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please place the medium-weight movable block on top of the lightest movable block, then place the heaviest movable block on top of the medium-weight movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(medium_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45481900790222574, 0.00864602199688497, 0.23840618968763688], \"gripper_state\": \"open\", \"block1_goal\": [0.5482143705593875, 0.22726300136126568, 0.44086958279399907], \"block2_goal\": [0.5499908588620024, 0.22656917150406192, 0.48082532062808314], \"block3_goal\": [0.5550992024099235, 0.22516827735587505, 0.5207749625940133], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the heaviest and medium-weight movable cubes in sequence on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45477997364028194, 0.008521939441382437, 0.23820183525649502], \"gripper_state\": \"open\", \"block1_goal\": [0.5480319475674904, 0.22743127991352785, 0.4408696350145452], \"block2_goal\": [0.5582717026799939, 0.22916307619642848, 0.5207181022219767], \"block3_goal\": [0.5516368964043328, 0.2283518482101491, 0.48076245803182793], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block on top of the medium-weight movable cube, then place the heaviest movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45581335550294744, -0.006218819237781632, 0.23782655688357984], \"gripper_state\": \"open\", \"block1_goal\": [0.6667122609140929, -0.18400825063428125, 0.48082706159829935], \"block2_goal\": [0.6536368245868741, -0.17328856167998366, 0.4409563174062682], \"block3_goal\": [0.6743865517527948, -0.19152290148305653, 0.5204838714024345], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the heaviest and lightest movable blocks on top of the medium-weight movable block in sequence.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45616228023998984, -0.0064732759010532725, 0.2379615536469591], \"gripper_state\": \"open\", \"block1_goal\": [0.6727276371107331, -0.18918584600333002, 0.5211748645269929], \"block2_goal\": [0.6536076496829148, -0.17336486184032165, 0.44095630957924214], \"block3_goal\": [0.6602841259508037, -0.1815264242429626, 0.4808971462180956], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block on top of the heaviest movable block, then place the medium-weight movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(lightest_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.44543026347169185, 0.011712242383342102, 0.23917484015507268], \"gripper_state\": \"open\", \"block1_goal\": [0.39041746159075835, 0.18386354238999505, 0.48094893265199484], \"block2_goal\": [0.38600641638747724, 0.18116261392895167, 0.5209270270891466], \"block3_goal\": [0.3839008242955408, 0.18410121493152481, 0.4409737728789981], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the medium-weight and lightest movable blocks on top of the heaviest movable block in order.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(medium_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.44504407348968694, 0.01104093215671876, 0.23917864020838558], \"gripper_state\": \"open\", \"block1_goal\": [0.3869450421894418, 0.17780858598996166, 0.5209337421000739], \"block2_goal\": [0.3817782509882405, 0.18030168891206302, 0.4809453042471463], \"block3_goal\": [0.383898273280669, 0.18409986157525265, 0.4409737735899216], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please place the lightest movable block on the fixed block, then place the medium-weight movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(lightest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4558213688990638, -0.005438973969682912, 0.23789247847071543], \"gripper_state\": \"open\", \"block1_goal\": [0.7182472477966355, -0.22898025417186874, 0.480886221538852], \"block2_goal\": [0.7240164185735467, -0.22550520143429933, 0.5207976327402016], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the medium-weight and lightest movable cubes in sequence on the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(medium_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45566827066833027, -0.005748750313356978, 0.23793992586505536], \"gripper_state\": \"open\", \"block1_goal\": [0.7271742483140543, -0.22462288796156316, 0.5212587970636743], \"block2_goal\": [0.7087176597371023, -0.23563670877961118, 0.4809712960357505], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block on the fixed cube, then place the heaviest movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(lightest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4564025115131757, -0.0055430084587162875, 0.2378653180990869], \"gripper_state\": \"open\", \"block1_goal\": [0.7183594926624801, -0.22835802627955723, 0.4808880310665678], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.7282562175908698, -0.21946143552446232, 0.5204205491307949], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the heaviest and lightest movable blocks in order on the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(heaviest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4562539925916239, -0.00578232444502143, 0.2379311819940521], \"gripper_state\": \"open\", \"block1_goal\": [0.7293611332302741, -0.21995525657365775, 0.5211880764028234], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.711214691561811, -0.23059335829714886, 0.4809728632940128], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please place the medium-weight movable block on the fixed block, then place the heaviest movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(medium_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45452391671372616, 0.007884332496066696, 0.23681923871388783], \"gripper_state\": \"open\", \"block1_goal\": [0.5479991182657876, 0.22742500526526174, 0.4409127643384709], \"block2_goal\": [0.7087161999641877, -0.23563905886613554, 0.4809749097075224], \"block3_goal\": [0.5508597353202292, 0.22819756630281485, 0.48085120323477787], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the heaviest and medium-weight movable blocks on the fixed block in sequence.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(heaviest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4556444378925218, -0.00566785234694955, 0.23793811543711613], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.7168084450678368, -0.22707297294645737, 0.5209472139285528], \"block3_goal\": [0.7112196646959981, -0.2305895326800022, 0.48096788814570957], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the medium-weight movable block on the fixed cube, then place the lightest movable block on top of the medium-weight movable block, and finally place the heaviest movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(medium_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45666672337795544, -0.00565616514579558, 0.23850004306700917], \"gripper_state\": \"open\", \"block1_goal\": [0.7289831076756208, -0.22323708095291478, 0.5204762809748326], \"block2_goal\": [0.708797828106016, -0.23557667607859797, 0.4809632113609941], \"block3_goal\": [0.7414349225687339, -0.215187792420566, 0.5595920124678687], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the medium-weight, heaviest, and lightest movable blocks on the fixed block in sequence.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(medium_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45641436417869297, -0.00590501563951013, 0.23852561887509222], \"gripper_state\": \"open\", \"block1_goal\": [0.7370351886309193, -0.2219967202732685, 0.5612352018633014], \"block2_goal\": [0.7087472362812097, -0.23560255762012422, 0.48095006801610635], \"block3_goal\": [0.717680213170904, -0.22787160594649739, 0.520909157369783], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the heaviest, medium-weight, and lightest movable blockson the fixed block in order.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(heaviest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45634017205133054, -0.005978673669878018, 0.2386044952077257], \"gripper_state\": \"open\", \"block1_goal\": [0.7364393524061146, -0.22093874734621768, 0.5613916578436698], \"block2_goal\": [0.7168149392765824, -0.22705496459591262, 0.5209488549809022], \"block3_goal\": [0.7112228411831011, -0.23058386322155075, 0.48096524980299293], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please place the lightest movable block 10cm behind the fixed block, then stack the heaviest movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(lightest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([-0.1, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45455629631638994, -0.007456360692059163, 0.23724628674884324], \"gripper_state\": \"open\", \"block1_goal\": [0.6163332460391003, -0.23006039473992493, 0.4409128223239974], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.6238958013606154, -0.22156644890302005, 0.48083020458204334], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the heaviest movable cube 0.12m behind the fixed block, then stack the medium-weight movable block on top of the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(heaviest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([-0.12, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45519318071351234, -0.00557177527994104, 0.23742903603999727], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.7076528341016396, -0.2362408936218629, 0.480975356861845], \"block3_goal\": [0.5900187026225981, -0.23038427823642393, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block 25cm to the left of the fixed block, then stack the medium-weight movable block on top of the heaviest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(lightest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0.25, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4476096557105556, 0.01389413532244121, 0.23835153672865578], \"gripper_state\": \"open\", \"block1_goal\": [0.7134177583298992, 0.01809669884658715, 0.44098542724196665], \"block2_goal\": [0.3824913169595746, 0.1804021257942795, 0.48095791852489883], \"block3_goal\": [0.3838976973205994, 0.18410332814932362, 0.44097668593590517], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block 10cm in front of the night colored mug, then stack the heaviest movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(lightest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0.1, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45667047366315194, -0.007400509236987457, 0.23719911654563303], \"gripper_state\": \"open\", \"block1_goal\": [0.5588949308375217, -0.0999067084569132, 0.4409128310488616], \"block2_goal\": [0.6536171031962731, -0.173268671540398, 0.44098542724196665], \"block3_goal\": [0.5659003615816703, -0.096254606267857, 0.4808394321075534], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the heaviest movable block 0.12m to the left of the milk colored mug, then stack the medium-weight movable block on top of the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(heaviest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0.12, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45522071538643394, -0.005477190462492379, 0.2373334429029172], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.708301751072801, -0.23596355492438653, 0.4809750701056293], \"block3_goal\": [0.7724365098295887, -0.03302945124032394, 0.4409854272419625], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block 15cm to the left of the black mug, then stack the medium-weight movable block on top of the heaviest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(lightest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0.15, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.44763898021305215, 0.013867064633345897, 0.2383857459422049], \"gripper_state\": \"open\", \"block1_goal\": [0.45041569604369636, 0.0520180700190129, 0.44098542724196665], \"block2_goal\": [0.3801304725186952, 0.1795253833573892, 0.48095195719261236], \"block3_goal\": [0.3838969626527159, 0.18410357526342297, 0.4409766859225468], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Pick up the lightest movable block and place it 15cm behind the fixed block, then place the medium-weight movable block in the white mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(lightest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([-0.15, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45714148720237746, -0.004472636281828342, 0.2376359940764287], \"gripper_state\": \"open\", \"block1_goal\": [0.5659966554052418, -0.23191041702649856, 0.44098542724196665], \"block2_goal\": [0.7685961882774588, -0.14738803732077893, 0.440985427234616], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the heaviest movable block 20cm behind the fixed block, then place the medium-weight movable block in the black mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(heaviest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([-0.2, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4474907032697768, -0.014189886749663167, 0.24001287559464507], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.43755725995073996, -0.09658831476299053, 0.44098542655751566], \"block3_goal\": [0.5104174760385782, -0.23034212851672434, 0.4409854272419625], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please place the medium-weight movable block 0.15m in front of the black mug, then place the lightest movable block in the white mug, and finally place the heaviest movable block in the black mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0.15, 0, 0.1])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4478074430492882, -0.01504013086433777, 0.2404334607999598], \"gripper_state\": \"open\", \"block1_goal\": [0.7770794523159901, -0.15314386093140564, 0.4409854272419674], \"block2_goal\": [0.588624606781053, -0.09711413248307751, 0.44098542724196665], \"block3_goal\": [0.44850982381559634, -0.09776915178309374, 0.4409854267977538], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block 0.15m to the left of the white mug, then place the medium-weight movable block in the black mug, and finally place the heaviest movable block in the white mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(lightest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0.15, 0.1])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45647730381419477, -0.004366955896772648, 0.23746605145235816], \"gripper_state\": \"open\", \"block1_goal\": [0.7768874784900547, -0.0011916442499370265, 0.44098542724196665], \"block2_goal\": [0.4389006054132826, -0.09545306948281027, 0.44098542724196665], \"block3_goal\": [0.7731435995343441, -0.15465606067682044, 0.44098542723375495], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block 20cm behind the fixed block, then place the medium-weight movable block in the black mug, and finally stack the heaviest movable block on top of the medium-weight movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(lightest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([-0.2, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4498665872408476, -0.019276118322874167, 0.2379378106082672], \"gripper_state\": \"open\", \"block1_goal\": [0.5102470435882142, -0.22997072800906365, 0.44098542724196665], \"block2_goal\": [0.43756365240270917, -0.09642327061059426, 0.44096115568415734], \"block3_goal\": [0.44535211314881545, -0.09459645513913693, 0.4809161240923388], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the lightest movable block on the fixed block, then place the medium-weight movable block in the white mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(lightest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4571402344293492, -0.004472381788403963, 0.23763367913512218], \"gripper_state\": \"open\", \"block1_goal\": [0.7177324575449282, -0.22904258686781562, 0.480962728937677], \"block2_goal\": [0.7700201362601955, -0.14767895884458812, 0.44098542723204787], \"block3_goal\": [0.38389878427165613, 0.18410251688771215, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Please pick up the heaviest movable block and stack it on the fixed block, then place the medium-weight movable block in the black mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(heaviest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.44753283914873315, -0.013510114526771156, 0.23989006106812955], \"gripper_state\": \"open\", \"block1_goal\": [0.5479952058005999, 0.22742436258676352, 0.44098542724196665], \"block2_goal\": [0.43900560389006316, -0.0963802627512047, 0.44098542690173725], \"block3_goal\": [0.7112141540919519, -0.23059459615660144, 0.4809749904094405], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the medium-weight movable block on the fixed cube, then place the lightest movable block in the white mug, and finally place the heaviest movable block in the black mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(medium_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.44776520050394286, -0.01523285537483969, 0.2404036214896313], \"gripper_state\": \"open\", \"block1_goal\": [0.7817457579362996, -0.15655159865977117, 0.44098542724196765], \"block2_goal\": [0.7087164965740251, -0.23563880252024957, 0.48097490958719374], \"block3_goal\": [0.44910811621745156, -0.09973423765311089, 0.4409854266936493], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Pick up the lightest movable block and stack it on the fixed block, then place the medium-weight movable block in the black mug, and finally place the heaviest movable block in the milk colored mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(lightest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4564913449899135, -0.004340314991773073, 0.23747728185526068], \"gripper_state\": \"open\", \"block1_goal\": [0.717734760592949, -0.2290404748798395, 0.48096272386094013], \"block2_goal\": [0.43918632040510247, -0.09670036038263166, 0.44098542724196665], \"block3_goal\": [0.7738988839423501, -0.15498624476727496, 0.4409854272341236], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Pick up the lightest movable block and stack it on the fixed block, then place the medium-weight movable block in the black mug, and finally stack the heaviest movable block on top of the medium-weight movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(lightest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4502041588254039, -0.018378570637942217, 0.23802237458648706], \"gripper_state\": \"open\", \"block1_goal\": [0.7177344467271832, -0.22904076317119063, 0.480962724557114], \"block2_goal\": [0.43919521077586754, -0.09670500192525763, 0.44096115567519767], \"block3_goal\": [0.4469486049937926, -0.09496244662976451, 0.48091620654530526], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Stack the lightest movable block on top of the heaviest movable block, then place the medium-weight movable block in the white mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(lightest_block)\nheaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_block)\ntarget_pos = heaviest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, heaviest_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45712678463090295, -0.00448401312634341, 0.23758911201761773], \"gripper_state\": \"open\", \"block1_goal\": [0.39043070438526734, 0.18387748219150765, 0.48097630400309926], \"block2_goal\": [0.7681563580365006, -0.1467699373070737, 0.44098542723165174], \"block3_goal\": [0.383899738940699, 0.18410243411875662, 0.4409825131814205], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Pick up the heaviest movable block and stack it on the medium-weight movable block, then place the lightest movable block in the black mug.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4473172795584906, -0.013596266166907978, 0.23981650597845489], \"gripper_state\": \"open\", \"block1_goal\": [0.45310522462189573, -0.0956090331238537, 0.4409854263529832], \"block2_goal\": [0.6536075198621704, -0.17336304954905044, 0.44096115644570366], \"block3_goal\": [0.6602835526214065, -0.18151790442634913, 0.48091090851443546], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block 10cm behind the fixed block, then place the medium-weight movable block in the white mug, and finally stack the heaviest movable block on top of the medium-weight movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(lightest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([-0.1, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4568275230859854, -0.004365592826290201, 0.2371778211723507], \"gripper_state\": \"open\", \"block1_goal\": [0.6160404612338035, -0.2302093989227627, 0.44098542724196665], \"block2_goal\": [0.7686066363258846, -0.14747743984985773, 0.44096115716877266], \"block3_goal\": [0.7768990368493157, -0.1565619797912975, 0.48090607120907974], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block 15cm behind the fixed block, then place the medium-weight movable block in the white mug, and finally stack the heaviest movable block on the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(lightest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([-0.15, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4557315779035887, -0.005556637452722905, 0.23725669229447094], \"gripper_state\": \"open\", \"block1_goal\": [0.5659966564125678, -0.23191041587804387, 0.44098542724196665], \"block2_goal\": [0.7685962726238911, -0.14738821197847984, 0.44098542724196665], \"block3_goal\": [0.7101202224549567, -0.23148516711389164, 0.48097537749302427], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block 10cm behind the fixed block, then place the medium-weight movable block in the black mug, and finally stack the heaviest movable block on top of the medium-weight movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(lightest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([-0.1, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nmedium_pos, medium_quat = pri.get_obj_pose(medium_block)\ntarget_pos = medium_pos + np.array([0, 0, 0.1])\npri.move(target_pos, medium_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4498956647938713, -0.01922267955686377, 0.23793916046522284], \"gripper_state\": \"open\", \"block1_goal\": [0.6160404612354661, -0.230209398920362, 0.44098542724196665], \"block2_goal\": [0.4377699025154851, -0.09615190904318353, 0.44096115567168165], \"block3_goal\": [0.4455975154992223, -0.09480680261048803, 0.4809161868024379], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the lightest movable block 15cm behind the fixed block, then place the medium-weight movable block in the black mug, and finally stack the heaviest movable block on the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(lightest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([-0.15, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45574892663696387, -0.005445998373676382, 0.23723578603954615], \"gripper_state\": \"open\", \"block1_goal\": [0.5659966564251521, -0.23191041586720104, 0.44098542724196665], \"block2_goal\": [0.4376246134732649, -0.09657199780024998, 0.44098542724196665], \"block3_goal\": [0.711497768830885, -0.22996724424668274, 0.48097504739676117], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the medium-weight movable block 20cm in front of the black mug, then place the lightest movable block in the white mug, and finally stack the heaviest movable block on the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0.2, 0, 0.1])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4557663462768602, -0.005360990813000085, 0.237226668893948], \"gripper_state\": \"open\", \"block1_goal\": [0.7797311679133317, -0.15680512262443314, 0.44098542724196665], \"block2_goal\": [0.6387202087945096, -0.09709513058205389, 0.44098542724196665], \"block3_goal\": [0.7094264860848941, -0.2317628620013355, 0.4809805120830451], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the medium-weight movable block 15cm in front of the black mug, then place the lightest movable block in the black mug, and finally stack the heaviest movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0.15, 0, 0.1])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45211985568165863, -0.014785767517208, 0.238322933431189], \"gripper_state\": \"open\", \"block1_goal\": [0.45240458298534714, -0.09661014919759008, 0.4409128252457168], \"block2_goal\": [0.588624606781053, -0.09711413248307751, 0.44098542724196665], \"block3_goal\": [0.46029834913182255, -0.08997817506677892, 0.480797659857404], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the medium-weight movable block 20cm in front of the black mug, then place the lightest movable block in the black mug, and finally stack the heaviest movable block on the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(medium_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0.2, 0, 0.1])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(heaviest_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45576898696364737, -0.00533391643972972, 0.23722220512111308], \"gripper_state\": \"open\", \"block1_goal\": [0.45330272668275273, -0.09556319007066079, 0.44098542724196665], \"block2_goal\": [0.6387202087945096, -0.09709513058205389, 0.44098542724196665], \"block3_goal\": [0.7113943106864143, -0.229783276397, 0.4809752131289734], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the heaviest movable block 15cm to the left of the white mug, then place the lightest movable block in the black mug, and finally stack the medium-weight movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0.15, 0.1])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45046417197330946, -0.014927909884757699, 0.23697968887511328], \"gripper_state\": \"open\", \"block1_goal\": [0.4532166966262477, -0.09508713354067806, 0.440941769981364], \"block2_goal\": [0.4481112788708145, -0.0931218299463048, 0.480890640173856], \"block3_goal\": [0.7720439617354278, -0.001783974951991323, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the heaviest movable block 20cm to the left of the white mug, then place the lightest movable block in the black mug, and finally stack the medium-weight movable block on the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(heaviest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0.2, 0.1])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nblack_pos, black_quat = pri.get_obj_pose('black_mug')\ntarget_pos = black_pos + np.array([0, 0, 0.15])\npri.move(target_pos, black_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.4557391374527654, -0.00557577582274995, 0.23727160343343895], \"gripper_state\": \"open\", \"block1_goal\": [0.4531596900639287, -0.09534124296928902, 0.44098542724196665], \"block2_goal\": [0.7068683911229384, -0.23765887306396835, 0.4809753706542335], \"block3_goal\": [0.7714637969070199, 0.04844575932519608, 0.4409854272419625], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the heaviest movable block 15cm to the left of the white mug, then place the lightest movable block in the white mug, and finally stack the medium-weight movable block on top of the lightest movable block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\npri.grab(heaviest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0.15, 0.1])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nlightest_pos, lightest_quat = pri.get_obj_pose(lightest_block)\ntarget_pos = lightest_pos + np.array([0, 0, 0.1])\npri.move(target_pos, lightest_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.456732008110362, -0.004395111646243652, 0.23717620754685748], \"gripper_state\": \"open\", \"block1_goal\": [0.7787959833769416, -0.15459300158470818, 0.440941766686944], \"block2_goal\": [0.7794178639600924, -0.15789224747864, 0.48088411785043494], \"block3_goal\": [0.7720439617354278, -0.001783974951991323, 0.44098542724196255], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    },
    {
        "instruction": "Place the heaviest movable block 20cm to the left of the white mug, then place the lightest movable block in the white mug, and finally stack the medium-weight movable block on the fixed block.",
        "code": "```python\nblock_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}\nsorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])\nlightest_block = sorted_blocks[0][0]\nmedium_block = sorted_blocks[1][0]\nheaviest_block = sorted_blocks[2][0]\nfixed_block = sorted_blocks[3][0]\npri.grab(heaviest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0.2, 0.1])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(lightest_block)\nwhite_pos, white_quat = pri.get_obj_pose('white_mug')\ntarget_pos = white_pos + np.array([0, 0, 0.15])\npri.move(target_pos, white_quat)\npri.gripper_ctrl('open')\npri.grab(medium_block)\nfixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)\ntarget_pos = fixed_pos + np.array([0, 0, 0.1])\npri.move(target_pos, fixed_quat)\npri.gripper_ctrl('open')\npri.reset_robot()```",
        "goal_pos": "{\"gripper_pos\": [0.45574161877352276, -0.005560131171879212, 0.23726413997694423], \"gripper_state\": \"open\", \"block1_goal\": [0.7781073552488186, -0.1539737431632951, 0.4409854272419667], \"block2_goal\": [0.7080178279228644, -0.23682324078779146, 0.4809750003679561], \"block3_goal\": [0.7714637969070199, 0.04844575932519608, 0.4409854272419625], \"block4_goal\": [0.7040362888980227, -0.23970775285209878, 0.44098543]}"
    }
]