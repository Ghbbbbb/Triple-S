[task description]
Move the gripper over a specified-weight block
[role thought]
First you need to konw the mass of specified-weight block by `pri.get_obj_mass()`, then get the obj_pose by `pri.get_obj_pose()`, then calculate the target_pos by `obj_pose + np.array([0, 0, z])`, here 'z' is the distance according to the insruction, finally move the gripper to target_pos by `pri.move()`.
[examples]
#example1
user: Move the gripper 10cm on top of the heaviest movable block.
you: "```python
# get the mass of block1, block2,block3, block4
block_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}
# get the pose of heaviest_movable_block
sorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])
heaviest_movable_block = sorted_blocks[2][0]
heaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_movable_block)
# calculate the target position, then move to the target position
target_pos = heaviest_pos + np.array([0, 0, 0.1])
pri.move(target_pos, heaviest_quat)```"
---

[task description]
Pick up a specified-weight block
[role thought]
First you need to konw the mass of specified-weight block by `pri.get_obj_mass()`, then you need to thought what block you need to pick(if the instruction has distance information like "farthest", "cloest", you need to calculate the distances between objects), then grab it by `pri.grab()`, finally reset to initial pose by `reset_robot()`.
[examples]
#example1
user: please grab the lightest movable block.
you: "```python
# get the mass of block1, block2,block3, block4
block_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}
# pick up the lightest_movable_block
sorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])
lightest_movable_block = sorted_blocks[0][0]
pri.grab(lightest_movable_block)
# reset the robot
pri.reset_robot()```"
#example2
user: Pick up the movable block closest to the fixed block.
you: "```python
# get the mass of block1, block2,block3, block4
block_masses={'block1':pri.get_obj_mass('block1'),'block2':pri.get_obj_mass('block2'),'block3':pri.get_obj_mass('block3'),'block4':pri.get_obj_mass('block4')}
# calculate the pose of lightest_movable_block, medium_weight_movable_block green_block, heaviest_movable_block, fixed_block
sorted_blocks = sorted(block_masses.items(),key=lambda x: x[1])
lightest_movable_block = sorted_blocks[0][0]
medium_weight_movable_block = sorted_blocks[1][0]
heaviest_movable_block = sorted_blocks[2][0]
fixed_block = sorted_blocks[3][0]
lightest_pos, lightest_quat = pri.get_obj_pose(lightest_movable_block)
medium_pos, medium_quat = pri.get_obj_pose(medium_weight_movable_block)
heaviest_pos, heaviest_quat = pri.get_obj_pose(heaviest_movable_block)
fixed_pos, fixed_quat = pri.get_obj_pose(fixed_block)
# calculate the distance between fixed block and other movable blocks
distances={lightest_block:np.linalg.norm(lightest_pos-fixed_pos),medium_block:np.linalg.norm(medium_pos-fixed_pos),heaviest_block:np.linalg.norm(heaviest_pos-fixed_pos)}
sorted_distances = sorted(distances.items(), key=lambda item:item[1])
# pick up the cloest block
cloest_obj = sorted_distances[0][0]
pri.grab(cloest_obj)
# reset the robot
pri.reset_robot()```"
---

[task description]
Stack the specified-weight block on the specified blocks or mugs.
[role thought]
First to get the names of blocks by their weight, then use the `stack_object_on_object()` function to stack the block on blocks or mugs, then reset to initial pose by `reset_robot()`.
[examples]
#example1
user: Pick up the heaviest movable block and place it in fixed block
you:"```python
# Get the names of blocks sorted by their weight in ascending order.
lightest_movable_block, medium_weight_movable_block, heaviest_movable_block, fixed_block = pri.get_sorted_weight_block_names()
# stack the heaviest_movable_block on the fixed_block
pri.stack_object_on_object(heaviest_movable_block,fixed_block)
# reset the robot
pri.reset_robot()```"
#example2
user:Stack the lightest and medium-weight movable cubes in order on top of the fixed block.
you:"```python
# Get the names of blocks sorted by their weight in ascending order.
lightest_movable_block, medium_weight_movable_block, heaviest_movable_block, fixed_block = pri.get_sorted_weight_block_names()
# stack the lightest_movable_block on fixed_block
pri.stack_object_on_object(lightest_movable_block,fixed_block)
# stack the medium_weight_movable_block on the lightest_movable_block
pri.stack_object_on_object(medium_weight_movable_block,lightest_movable_block)
# reset the robot
pri.reset_robot()```
#example3
user: Place the heaviest movable block in the dark colored mug.
you:"```python
# Get the names of blocks sorted by their weight in ascending order.
lightest_movable_block, medium_weight_movable_block, heaviest_movable_block, fixed_block = pri.get_sorted_weight_block_names()
# dark colored mug is black_mug, so stack the heaviest_movable_block on black_mug
pri.stack_object_on_object(heaviest_movable_block,"black_mug")
# reset the robot
pri.reset_robot()```"
---

[task description]
Move or Place the specified-weight block on a specified position.
[role thought]
First to get the names of blocks by their weight, then use the `pick_and_place_next_to()` function to pick up an object and place it in relation to another object, then reset to initial pose by `reset_robot()`.
[examples]
#example1
user: Please place the lightest movable block 15cm to the left of the white mug.
you:"```python
# Get the names of blocks sorted by their weight in ascending order.
lightest_movable_block, medium_weight_movable_block, heaviest_movable_block, fixed_block = pri.get_sorted_weight_block_names()
# Place the lightest_movable_block 15cm left to the white_mug
pri.pick_and_place_next_to(lightest_movable_block,'white_mug','left',0.15)
# reset the robot
pri.reset_robot()```"
#example2
user: Please place the medium weight movable block 12cm behind the fixed block, then move the heaviest movable block 6cm forward to the lightest movable block.
you:"```python
# Get the names of blocks sorted by their weight in ascending order.
lightest_movable_block, medium_weight_movable_block, heaviest_movable_block, fixed_block = pri.get_sorted_weight_block_names()
# Place the medium_weight_movable_block 12cm backward to the fixed_block
pri.pick_and_place_next_to(medium_weight_movable_block,fixed_block,'backward',0.12)
# Stack the heaviest_movable_block 6cm forward to the lightest_movable_block
pri.pick_and_place_next_to(heaviest_movable_block,lightest_movable_block,'forward',0.06)
# reset the robot
pri.reset_robot()```"
---

[task description]
You can use the pri.say() func if the existing functions cannot solve user robot instructions:
[role thought]
No existing object or no matching apis to solve the user's instruction.
[examples]
#example1
user:please write a word with the robotic arm.
you:"```python
pri.say('Sorry, I don't understand this instruction because I don't have any functions available in my library')```"
---